name: Tests
on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  lint:
    name: Lint with ESLint + TypeCheck
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install NPM dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint
      - name: Run TypeCheck
        run: npm run typecheck
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Patch sonar.properties
        run: sed -i s/\$VERSION/$(jq -r .version package.json)/ sonar-project.properties
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  test:
    name: Test Sentry Integration
    strategy:
      matrix:
        os: [ ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, macos-10.15, windows-2019 ]
        version: [latest, 1.58.0]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Install Sentry CLI
        uses: ./
        with:
          version: ${{ matrix.version }}
          url: ${{ secrets.SENTRY_URL }}
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: ${{ secrets.SENTRY_ORGANIZATION }}
          project: ${{ secrets.SENTRY_PROJECT }}
      - name: Display Sentry CLI info
        run: |
          sentry-cli --help
          sentry-cli info
      - name: Test Sentry Integration
        if: matrix.os == 'ubuntu-20.04' && matrix.version == 'latest'  # do not duplicate releases
        run: |
          VERSION=$(sentry-cli releases propose-version)
          sentry-cli releases new "$VERSION"
          sentry-cli releases set-commits "$VERSION" --auto
          sentry-cli releases files "$VERSION" upload-sourcemaps ./dist \
            --rewrite \
            --ext map \
            --validate \
            --verbose \
            --strip-common-prefix
          sentry-cli releases finalize "$VERSION"

          export SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          sentry-cli send-event \
            --release="$VERSION" \
            --fingerprint="GH-DEMO" \
            --message="Hello from GitHub Actions" \
            --level=debug
